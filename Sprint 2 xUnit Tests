import unittest
from SOSGUISprint2 import SOS

class Game:

    def __init__(self, size):
        self.board_size = size
        self.board = [["" for _ in range(size)] for _ in range(size)]
        self.current_turn = "Blue"

    def make_move(self, i, j, symbol):
        if self.board[i][j] == "":
            self.board[i][j] = symbol
            self.current_turn = "Red" if self.current_turn == "Blue" else "Blue"
            return True
        return False

    def reset_board(self):
        self.board = [["" for _ in range(self.board_size)]
                      for _ in range(self.board_size)]
        self.current_turn = "Blue"

    def is_full(self):
        return all(cell != "" for row in self.board for cell in row)

class TestGame(unittest.TestCase):

    def setUp(self):
        self.game = Game(3)

    def test_initial_board(self):
        self.assertEqual(self.game.board, [["", "", ""], ["", "", ""], ["", "", ""]])

    def test_make_move(self):
        self.assertTrue(self.game.make_move(0, 0, 'S'))
        self.assertEqual(self.game.board[0][0], 'S')

    def test_make_move_on_filled_square(self):
        self.game.make_move(0, 0, 'S')
        self.assertFalse(self.game.make_move(0, 0, 'O'))

    def test_turn_switch(self):
        self.game.make_move(0, 0, 'S')
        self.assertEqual(self.game.current_turn, "Red")
        self.game.make_move(0, 1, 'O')
        self.assertEqual(self.game.current_turn, "Blue")

    def test_reset_board(self):
        self.game.make_move(0, 0, 'S')
        self.game.reset_board()
        self.assertEqual(self.game.board, [["", "", ""], ["", "", ""], ["", "", ""]])
        self.assertEqual(self.game.current_turn, "Blue")

    def test_is_full(self):
        for i in range(3):
            for j in range(3):
                self.game.make_move(i, j, 'S' if (i + j) % 2 == 0 else 'O')
        self.assertTrue(self.game.is_full())

        self.game.reset_board()
        self.assertFalse(self.game.is_full())

if __name__ == "__main__":
    unittest.main()
